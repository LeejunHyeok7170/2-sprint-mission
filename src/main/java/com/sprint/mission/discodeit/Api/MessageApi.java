/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.sprint.mission.discodeit.Api;

import com.sprint.mission.discodeit.dto.data.MessageDto;
import com.sprint.mission.discodeit.dto.response.PageResponse;
import com.sprint.mission.discodeit.dto.request.MessageCreateRequest;
import com.sprint.mission.discodeit.dto.request.MessageUpdateRequest;
import com.sprint.mission.discodeit.dto.request.Pageable;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-14T09:27:05.182007800+09:00[Asia/Seoul]")
@Validated
@Controller
@Tag(name = "Message", description = "Message API")
public interface MessageApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /api/messages : Message 생성
   *
   * @param messageCreateRequest (required)
   * @param attachments          Message 첨부 파일들 (optional)
   * @return Channel 또는 User를 찾을 수 없음 (status code 404) or Message가 성공적으로 생성됨 (status code 201)
   */
  @Operation(
      operationId = "create2",
      summary = "Message 생성",
      tags = {"Message"},
      responses = {
          @ApiResponse(responseCode = "404", description = "Channel 또는 User를 찾을 수 없음"),
          @ApiResponse(responseCode = "201", description = "Message가 성공적으로 생성됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = MessageDto.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/api/messages",
      produces = {"*/*"},
      consumes = {"multipart/form-data"}
  )
  default ResponseEntity<MessageDto> create2(
      @Parameter(name = "messageCreateRequest", description = "", required = true) @Valid @RequestPart(value = "messageCreateRequest", required = true) MessageCreateRequest messageCreateRequest,
      @Parameter(name = "attachments", description = "Message 첨부 파일들") @Valid @RequestParam(value = "attachments", required = false) List<MultipartFile> attachments
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"createdAt\" : \"\", \"attachments\" : \"\", \"author\" : { \"profile\" : { \"fileName\" : \"\", \"size\" : \"\", \"id\" : \"\", \"contentType\" : \"\" }, \"online\" : \"\", \"id\" : \"\", \"email\" : \"\", \"username\" : \"\" }, \"id\" : \"\", \"content\" : \"\", \"channelId\" : \"\", \"updatedAt\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * DELETE /api/messages/{messageId} : Message 삭제
   *
   * @param messageId 삭제할 Message ID (required)
   * @return Message가 성공적으로 삭제됨 (status code 204) or Message를 찾을 수 없음 (status code 404)
   */
  @Operation(
      operationId = "delete1",
      summary = "Message 삭제",
      tags = {"Message"},
      responses = {
          @ApiResponse(responseCode = "204", description = "Message가 성공적으로 삭제됨"),
          @ApiResponse(responseCode = "404", description = "Message를 찾을 수 없음")
      }
  )
  @RequestMapping(
      method = RequestMethod.DELETE,
      value = "/api/messages/{messageId}",
      produces = {"*/*"}
  )
  default ResponseEntity<Void> delete1(
      @Parameter(name = "messageId", description = "삭제할 Message ID", required = true, in = ParameterIn.PATH) @PathVariable("messageId") Object messageId
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * GET /api/messages : Channel의 Message 목록 조회
   *
   * @param channelId 조회할 Channel ID (required)
   * @param pageable  페이징 정보 (required)
   * @return Message 목록 조회 성공 (status code 200)
   */
  @Operation(
      operationId = "findAllByChannelId",
      summary = "Channel의 Message 목록 조회",
      tags = {"Message"},
      responses = {
          @ApiResponse(responseCode = "200", description = "Message 목록 조회 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = PageResponse.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/messages",
      produces = {"*/*"}
  )
  default ResponseEntity<PageResponse> findAllByChannelId(
      @NotNull @Parameter(name = "channelId", description = "조회할 Channel ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "channelId", required = true) UUID channelId,
      @NotNull @Parameter(name = "pageable", description = "페이징 정보", required = true, in = ParameterIn.QUERY) @Valid Pageable pageable
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"number\" : \"\", \"size\" : \"\", \"hasNext\" : \"\", \"content\" : \"\", \"totalElements\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * PATCH /api/messages/{messageId} : Message 내용 수정
   *
   * @param messageId            수정할 Message ID (required)
   * @param messageUpdateRequest (required)
   * @return Message가 성공적으로 수정됨 (status code 200) or Message를 찾을 수 없음 (status code 404)
   */
  @Operation(
      operationId = "update2",
      summary = "Message 내용 수정",
      tags = {"Message"},
      responses = {
          @ApiResponse(responseCode = "200", description = "Message가 성공적으로 수정됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = MessageDto.class))
          }),
          @ApiResponse(responseCode = "404", description = "Message를 찾을 수 없음")
      }
  )
  @RequestMapping(
      method = RequestMethod.PATCH,
      value = "/api/messages/{messageId}",
      produces = {"*/*"},
      consumes = {"application/json"}
  )
  default ResponseEntity<MessageDto> update2(
      @Parameter(name = "messageId", description = "수정할 Message ID", required = true, in = ParameterIn.PATH) @PathVariable("messageId") Object messageId,
      @Parameter(name = "MessageUpdateRequest", description = "", required = true) @Valid @RequestBody MessageUpdateRequest messageUpdateRequest
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"createdAt\" : \"\", \"attachments\" : \"\", \"author\" : { \"profile\" : { \"fileName\" : \"\", \"size\" : \"\", \"id\" : \"\", \"contentType\" : \"\" }, \"online\" : \"\", \"id\" : \"\", \"email\" : \"\", \"username\" : \"\" }, \"id\" : \"\", \"content\" : \"\", \"channelId\" : \"\", \"updatedAt\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}
