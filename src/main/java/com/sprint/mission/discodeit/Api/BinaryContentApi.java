/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.sprint.mission.discodeit.Api;

import com.sprint.mission.discodeit.dto.data.BinaryContentDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import java.util.Optional;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-14T09:27:05.182007800+09:00[Asia/Seoul]")
@Validated
@Controller
@Tag(name = "BinaryContent", description = "첨부 파일 API")
public interface BinaryContentApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * GET /api/binaryContents/{binaryContentId}/download : 파일 다운로드
   *
   * @param binaryContentId 다운로드할 파일 ID (required)
   * @return 파일 다운로드 성공 (status code 200)
   */
  @Operation(
      operationId = "download",
      summary = "파일 다운로드",
      tags = {"BinaryContent"},
      responses = {
          @ApiResponse(responseCode = "200", description = "파일 다운로드 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/binaryContents/{binaryContentId}/download",
      produces = {"*/*"}
  )
  default ResponseEntity<?> download(
      @Parameter(name = "binaryContentId", description = "다운로드할 파일 ID",
          required = true, in = ParameterIn.PATH) @PathVariable("binaryContentId")
      UUID binaryContentId
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * GET /api/binaryContents/{binaryContentId} : 첨부 파일 조회
   *
   * @param binaryContentId 조회할 첨부 파일 ID (required)
   * @return 첨부 파일 조회 성공 (status code 200) or 첨부 파일을 찾을 수 없음 (status code 404)
   */
  @Operation(
      operationId = "find",
      summary = "첨부 파일 조회",
      tags = {"BinaryContent"},
      responses = {
          @ApiResponse(responseCode = "200", description = "첨부 파일 조회 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = BinaryContentDto.class))
          }),
          @ApiResponse(responseCode = "404", description = "첨부 파일을 찾을 수 없음")
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/binaryContents/{binaryContentId}",
      produces = {"*/*"}
  )
  default ResponseEntity<BinaryContentDto> find(
      @Parameter(name = "binaryContentId", description = "조회할 첨부 파일 ID", required = true, in = ParameterIn.PATH) @PathVariable("binaryContentId") UUID binaryContentId
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"fileName\" : \"\", \"size\" : \"\", \"id\" : \"\", \"contentType\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * GET /api/binaryContents : 여러 첨부 파일 조회
   *
   * @param binaryContentIds 조회할 첨부 파일 ID 목록 (required)
   * @return 첨부 파일 목록 조회 성공 (status code 200)
   */
  @Operation(
      operationId = "findAllByIdIn",
      summary = "여러 첨부 파일 조회",
      tags = {"BinaryContent"},
      responses = {
          @ApiResponse(responseCode = "200", description = "첨부 파일 목록 조회 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/binaryContents",
      produces = {"*/*"}
  )
  default ResponseEntity<Object> findAllByIdIn(
      @NotNull @Parameter(name = "binaryContentIds", description = "조회할 첨부 파일 ID 목록", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "binaryContentIds", required = true) Object binaryContentIds
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}
