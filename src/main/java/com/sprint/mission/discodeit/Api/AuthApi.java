/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.sprint.mission.discodeit.Api;

import com.sprint.mission.discodeit.dto.data.UserDto;
import com.sprint.mission.discodeit.dto.request.LoginRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-14T09:27:05.182007800+09:00[Asia/Seoul]")
@Validated
@Controller
@Tag(name = "Auth", description = "인증 API")
public interface AuthApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /api/auth/login : 로그인
   *
   * @param loginRequest (required)
   * @return 사용자를 찾을 수 없음 (status code 404) or 비밀번호가 일치하지 않음 (status code 400) or 로그인 성공 (status
   * code 200)
   */
  @Operation(
      operationId = "login",
      summary = "로그인",
      tags = {"Auth"},
      responses = {
          @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없음"),
          @ApiResponse(responseCode = "400", description = "비밀번호가 일치하지 않음"),
          @ApiResponse(responseCode = "200", description = "로그인 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = UserDto.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/api/auth/login",
      produces = {"*/*"},
      consumes = {"application/json"}
  )
  default ResponseEntity<UserDto> login(
      @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"profile\" : { \"fileName\" : \"\", \"size\" : \"\", \"id\" : \"\", \"contentType\" : \"\" }, \"online\" : \"\", \"id\" : \"\", \"email\" : \"\", \"username\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}
