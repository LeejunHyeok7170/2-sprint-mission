/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sprint.mission.discodeit.Api;

import com.sprint.mission.discodeit.dto.request.LoginRequest;
import com.sprint.mission.discodeit.entity.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-03T13:02:47.093482200+09:00[Asia/Seoul]")
@Validated
@RestController
@Tag(name = "Auth", description = "인증 API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/auth/login : 로그인
     *
     * @param loginRequest  (required)
     * @return 로그인 성공 (status code 200)
     *         or 사용자를 찾을 수 없음 (status code 404)
     *         or 비밀번호가 일치하지 않음 (status code 400)
     */
    @Operation(
        operationId = "login",
        summary = "로그인",
        tags = { "Auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "로그인 성공", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없음"),
            @ApiResponse(responseCode = "400", description = "비밀번호가 일치하지 않음")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/auth/login",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<User> login(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"createdAt\" : \"\", \"password\" : \"\", \"profileId\" : \"\", \"id\" : \"\", \"email\" : \"\", \"updatedAt\" : \"\", \"username\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
