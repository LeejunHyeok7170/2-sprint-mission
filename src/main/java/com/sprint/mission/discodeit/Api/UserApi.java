/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.sprint.mission.discodeit.Api;

import com.sprint.mission.discodeit.dto.data.UserDto;
import com.sprint.mission.discodeit.dto.data.UserStatusDto;
import com.sprint.mission.discodeit.dto.request.UserCreateRequest;
import com.sprint.mission.discodeit.dto.request.UserStatusUpdateRequest;
import com.sprint.mission.discodeit.dto.request.UserUpdateRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-14T09:27:05.182007800+09:00[Asia/Seoul]")
@Validated
@Controller
@Tag(name = "User", description = "User API")
public interface UserApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /api/users : User 등록
   *
   * @param userCreateRequest (required)
   * @param profile           User 프로필 이미지 (optional)
   * @return 같은 email 또는 username를 사용하는 User가 이미 존재함 (status code 400) or User가 성공적으로 생성됨 (status
   * code 201)
   */
  @Operation(
      operationId = "create",
      summary = "User 등록",
      tags = {"User"},
      responses = {
          @ApiResponse(responseCode = "400", description = "같은 email 또는 username를 사용하는 User가 이미 존재함"),
          @ApiResponse(responseCode = "201", description = "User가 성공적으로 생성됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = UserDto.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/api/users",
      produces = {"*/*"},
      consumes = {"multipart/form-data"}
  )
  default ResponseEntity<UserDto> create(
      @RequestPart(value = "userCreateRequest", required = false) @Valid
      UserCreateRequest userCreateRequest,
      @RequestPart(value = "profile", required = false) MultipartFile profile
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"profile\" : { \"fileName\" : \"\", \"size\" : \"\", \"id\" : \"\", \"contentType\" : \"\" }, \"online\" : \"\", \"id\" : \"\", \"email\" : \"\", \"username\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * DELETE /api/users/{userId} : User 삭제
   *
   * @param userId 삭제할 User ID (required)
   * @return User를 찾을 수 없음 (status code 404) or User가 성공적으로 삭제됨 (status code 204)
   */
  @Operation(
      operationId = "delete",
      summary = "User 삭제",
      tags = {"User"},
      responses = {
          @ApiResponse(responseCode = "404", description = "User를 찾을 수 없음"),
          @ApiResponse(responseCode = "204", description = "User가 성공적으로 삭제됨")
      }
  )
  @RequestMapping(
      method = RequestMethod.DELETE,
      value = "/api/users/{userId}",
      produces = {"*/*"}
  )
  default ResponseEntity<Void> delete(
      @Parameter(name = "userId", description = "삭제할 User ID", required = true,
          in = ParameterIn.PATH) @PathVariable("userId") UUID userId
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * GET /api/users : 전체 User 목록 조회
   *
   * @return User 목록 조회 성공 (status code 200)
   */
  @Operation(
      operationId = "findAll",
      summary = "전체 User 목록 조회",
      tags = {"User"},
      responses = {
          @ApiResponse(responseCode = "200", description = "User 목록 조회 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/users",
      produces = {"*/*"}
  )
  default ResponseEntity<List<UserDto>> findAll(

  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * PATCH /api/users/{userId} : User 정보 수정
   *
   * @param userId            수정할 User ID (required)
   * @param userUpdateRequest (required)
   * @param profile           수정할 User 프로필 이미지 (optional)
   * @return User 정보가 성공적으로 수정됨 (status code 200) or 같은 email 또는 username를 사용하는 User가 이미 존재함 (status
   * code 400) or User를 찾을 수 없음 (status code 404)
   */
  @Operation(
      operationId = "update",
      summary = "User 정보 수정",
      tags = {"User"},
      responses = {
          @ApiResponse(responseCode = "200", description = "User 정보가 성공적으로 수정됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = UserDto.class))
          }),
          @ApiResponse(responseCode = "400", description = "같은 email 또는 username를 사용하는 User가 이미 존재함"),
          @ApiResponse(responseCode = "404", description = "User를 찾을 수 없음")
      }
  )
  @RequestMapping(
      method = RequestMethod.PATCH,
      value = "/api/users/{userId}",
      produces = {"*/*"},
      consumes = {"multipart/form-data"}
  )
  default ResponseEntity<UserDto> update(
      @Parameter(name = "userId", description = "수정할 User ID", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
      @Parameter(name = "userUpdateRequest", description = "", required = true) @Valid @RequestPart(value = "userUpdateRequest", required = true) UserUpdateRequest userUpdateRequest,
      @Parameter(name = "profile", description = "수정할 User 프로필 이미지") @Valid @RequestParam(value = "profile", required = false) MultipartFile profile
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"profile\" : { \"fileName\" : \"\", \"size\" : \"\", \"id\" : \"\", \"contentType\" : \"\" }, \"online\" : \"\", \"id\" : \"\", \"email\" : \"\", \"username\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * PATCH /api/users/{userId}/userStatus : User 온라인 상태 업데이트
   *
   * @param userId                  상태를 변경할 User ID (required)
   * @param userStatusUpdateRequest (required)
   * @return 해당 User의 UserStatus를 찾을 수 없음 (status code 404) or User 온라인 상태가 성공적으로 업데이트됨 (status code
   * 200)
   */
  @Operation(
      operationId = "updateUserStatusByUserId",
      summary = "User 온라인 상태 업데이트",
      tags = {"User"},
      responses = {
          @ApiResponse(responseCode = "404", description = "해당 User의 UserStatus를 찾을 수 없음"),
          @ApiResponse(responseCode = "200", description = "User 온라인 상태가 성공적으로 업데이트됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = UserStatusDto.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.PATCH,
      value = "/api/users/{userId}/userStatus",
      produces = {"*/*"},
      consumes = {"application/json"}
  )
  default ResponseEntity<UserStatusDto> updateUserStatusByUserId(
      @Parameter(name = "userId", description = "상태를 변경할 User ID", required = true, in = ParameterIn.PATH) @PathVariable("userId") UUID userId,
      @Parameter(name = "UserStatusUpdateRequest", description = "", required = true) @Valid @RequestBody UserStatusUpdateRequest userStatusUpdateRequest
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"lastActiveAt\" : \"\", \"id\" : \"\", \"userId\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}
