/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.sprint.mission.discodeit.Api;

import com.sprint.mission.discodeit.dto.data.ChannelDto;
import com.sprint.mission.discodeit.dto.request.PrivateChannelCreateRequest;
import com.sprint.mission.discodeit.dto.request.PublicChannelCreateRequest;
import com.sprint.mission.discodeit.dto.request.PublicChannelUpdateRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-14T09:27:05.182007800+09:00[Asia/Seoul]")
@Validated
@Controller
@Tag(name = "Channel", description = "Channel API")
public interface ChannelApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /api/channels/public : Public Channel 생성
   *
   * @param publicChannelCreateRequest (required)
   * @return Public Channel이 성공적으로 생성됨 (status code 201)
   */
  @Operation(
      operationId = "create3",
      summary = "Public Channel 생성",
      tags = {"Channel"},
      responses = {
          @ApiResponse(responseCode = "201", description = "Public Channel이 성공적으로 생성됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = ChannelDto.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/api/channels/public",
      produces = {"*/*"},
      consumes = {"application/json"}
  )
  default ResponseEntity<ChannelDto> create3(
      @Parameter(name = "PublicChannelCreateRequest", description = "", required = true) @Valid @RequestBody PublicChannelCreateRequest publicChannelCreateRequest
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"lastMessageAt\" : \"\", \"name\" : \"\", \"description\" : \"\", \"id\" : \"\", \"type\" : \"\", \"participants\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * POST /api/channels/private : Private Channel 생성
   *
   * @param privateChannelCreateRequest (required)
   * @return Private Channel이 성공적으로 생성됨 (status code 201)
   */
  @Operation(
      operationId = "create4",
      summary = "Private Channel 생성",
      tags = {"Channel"},
      responses = {
          @ApiResponse(responseCode = "201", description = "Private Channel이 성공적으로 생성됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = ChannelDto.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/api/channels/private",
      produces = {"*/*"},
      consumes = {"application/json"}
  )
  default ResponseEntity<ChannelDto> create4(
      @Parameter(name = "PrivateChannelCreateRequest", description = "", required = true) @Valid @RequestBody PrivateChannelCreateRequest privateChannelCreateRequest
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"lastMessageAt\" : \"\", \"name\" : \"\", \"description\" : \"\", \"id\" : \"\", \"type\" : \"\", \"participants\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * DELETE /api/channels/{channelId} : Channel 삭제
   *
   * @param channelId 삭제할 Channel ID (required)
   * @return Channel이 성공적으로 삭제됨 (status code 204) or Channel을 찾을 수 없음 (status code 404)
   */
  @Operation(
      operationId = "delete2",
      summary = "Channel 삭제",
      tags = {"Channel"},
      responses = {
          @ApiResponse(responseCode = "204", description = "Channel이 성공적으로 삭제됨"),
          @ApiResponse(responseCode = "404", description = "Channel을 찾을 수 없음")
      }
  )
  @RequestMapping(
      method = RequestMethod.DELETE,
      value = "/api/channels/{channelId}",
      produces = {"*/*"}
  )
  default ResponseEntity<Void> delete2(
      @Parameter(name = "channelId", description = "삭제할 Channel ID", required = true, in = ParameterIn.PATH) @PathVariable("channelId") Object channelId
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * GET /api/channels : User가 참여 중인 Channel 목록 조회
   *
   * @param userId 조회할 User ID (required)
   * @return Channel 목록 조회 성공 (status code 200)
   */
  @Operation(
      operationId = "findAll1",
      summary = "User가 참여 중인 Channel 목록 조회",
      tags = {"Channel"},
      responses = {
          @ApiResponse(responseCode = "200", description = "Channel 목록 조회 성공", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = Object.class))
          })
      }
  )
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/api/channels",
      produces = {"*/*"}
  )
  default ResponseEntity<Object> findAll1(
      @NotNull @Parameter(name = "userId", description = "조회할 User ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = true) Object userId
  ) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }


  /**
   * PATCH /api/channels/{channelId} : Channel 정보 수정
   *
   * @param channelId                  수정할 Channel ID (required)
   * @param publicChannelUpdateRequest (required)
   * @return Channel 정보가 성공적으로 수정됨 (status code 200) or Channel을 찾을 수 없음 (status code 404) or
   * Private Channel은 수정할 수 없음 (status code 400)
   */
  @Operation(
      operationId = "update3",
      summary = "Channel 정보 수정",
      tags = {"Channel"},
      responses = {
          @ApiResponse(responseCode = "200", description = "Channel 정보가 성공적으로 수정됨", content = {
              @Content(mediaType = "*/*", schema = @Schema(implementation = ChannelDto.class))
          }),
          @ApiResponse(responseCode = "404", description = "Channel을 찾을 수 없음"),
          @ApiResponse(responseCode = "400", description = "Private Channel은 수정할 수 없음")
      }
  )
  @RequestMapping(
      method = RequestMethod.PATCH,
      value = "/api/channels/{channelId}",
      produces = {"*/*"},
      consumes = {"application/json"}
  )
  default ResponseEntity<ChannelDto> update3(
      @Parameter(name = "channelId", description = "수정할 Channel ID", required = true, in = ParameterIn.PATH) @PathVariable("channelId") Object channelId,
      @Parameter(name = "PublicChannelUpdateRequest", description = "", required = true) @Valid @RequestBody PublicChannelUpdateRequest publicChannelUpdateRequest
  ) {
    getRequest().ifPresent(request -> {
      for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
        if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
          String exampleString = "{ \"lastMessageAt\" : \"\", \"name\" : \"\", \"description\" : \"\", \"id\" : \"\", \"type\" : \"\", \"participants\" : \"\" }";
          ApiUtil.setExampleResponse(request, "*/*", exampleString);
          break;
        }
      }
    });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

  }

}
